#!/usr/bin/env bash

set -euo pipefail

function usage() {
  cat <<EOF

Usage:

# kubectl gopass apply [optional kubectl apply params] my-secret
    applies secret "my-secret" via kubectl. Namespace and other params can be
    specified and are passed through to kubectl.

# kubectl gopass apply-recursive [optional kubectl apply params] my-secret-path
    like apply but takes a path and applies all secrets below that path

# kubectl gopass diff [optional kubectl apply params] my-secret
    shows the secret diff of "my-secret" via kubectl. Namespace and other 
    params can be specified and are passed through to kubectl.

# kubectl gopass diff-recursive [optional kubectl apply params] my-secret-path
    like diff but takes a path and applies all secrets below that path
    
# kubectl gopass create my-new-secret
    create a new secret prefilled with a kubernetes secret template and starts
    an editor to edit the newly created secret

# kubectl gopass version
    prints out the kubectl-gopass version

# kubectl gopass help
    prints these usage instructions

EOF
}

diff_or_apply(){
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Too few arguments, secret is required"
    usage
    exit 1
  fi
  SECRET="${*: -1}"

  KUBECTL_ARGS=("$@")
  unset "KUBECTL_ARGS[${#KUBECTL_ARGS[@]}-1]"
  unset "KUBECTL_ARGS[0]"
  LEN_KUBECTL_ARGS=${#KUBECTL_ARGS[@]}
  if [[ "$LEN_KUBECTL_ARGS" -lt 1 ]]; then
    echo "will $1 secret $SECRET"
  else
    echo "will $1 secret $SECRET with additional kubectl args '" "${KUBECTL_ARGS[@]}" "'"
  fi
  $GOPASS show "$SECRET" | $KUBECTL "$1" ${KUBECTL_ARGS[@]+"${KUBECTL_ARGS[@]}"} -f -
}

recursive() {
  if [[ "$#" -lt 2 ]]; then
    echo >&2 "Too few arguments, secret path is required"
    usage
    exit 1
  fi

  SECRETPATH="${*: -1}"

  KUBECTL_ARGS=("$@")
  unset "KUBECTL_ARGS[${#KUBECTL_ARGS[@]}-1]"
  unset "KUBECTL_ARGS[0]"

  IFS=$'\n'
  for SECRET in $(gopass ls -f "$SECRETPATH"); do
    diff_or_apply "$1" ${KUBECTL_ARGS[@]+"${KUBECTL_ARGS[@]}"} "$SECRET" || true
  done
}

create() {
  if [[ "$#" -lt 1 ]]; then
    echo >&2 "Too few arguments, target secret is required"
    usage
    exit 1
  fi
  SECRETNAME=${*:(-1)}

  gopass insert "$SECRETNAME" <<EOL
apiVersion: v1
kind: Secret
metadata:
  name: ${SECRETNAME//\//-}
type: Opaque
stringData:
  key: value
  otherkey: othervalue
EOL
  gopass edit "$SECRETNAME"
  exit 0
}

main() {
  if hash kubectl 2>/dev/null; then
    KUBECTL=kubectl
  elif hash kubectl.exe 2>/dev/null; then
    KUBECTL=kubectl.exe
  else
    echo >&2 "kubectl is not installed"
    exit 1
  fi

  if hash kubectl 2>/dev/null; then
    GOPASS=gopass
  elif hash kubectl.exe 2>/dev/null; then
    GOPASS=gopass.exe
  else
    echo >&2 "gopass is not installed"
    exit 1
  fi

  if [[ "$#" -eq 0 ]]; then
    usage | less
    return
  fi

  case "$1" in
  '-h' | '--help' | 'help')
    usage | less
    ;;
  'apply'|'diff')
    diff_or_apply "${@:1}"
    exit 0
    ;;
  'diff-recursive'| 'recursive-diff')
    recursive "diff" "${@:2}"
    ;;
  'apply-recursive'| 'recursive-apply')
    recursive "apply" "${@:2}"
    ;;
  'create')
    create "${@:1}"
    ;;
  'version')
    echo "0.0.2"
    exit 0
    ;;
   -*)
    usage
    error "unrecognized flag \"${1}\""
    ;;
   *)
    usage
    error "unknown command \"$1\""
  esac

}

main "$@"
